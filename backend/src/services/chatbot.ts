import axios from 'axios';
import dotenv from 'dotenv';
import { Db } from 'mongodb';
import { createClient } from 'redis';
import { z } from 'zod';
import { nanoid } from 'nanoid';

dotenv.config();

const WitAI = process.env.WitAI;
const REDIS_URL = process.env.REDIS_URL || 'redis://127.0.0.1:6379';
const CACHE_TTL = parseInt(process.env.CACHE_TTL || '7200', 10); // 2 gi·ªù
const CONTEXT_TTL = parseInt(process.env.CONTEXT_TTL || '86400', 10); // 24 gi·ªù

if (!WitAI) {
  throw new Error('WitAI token is not defined in environment variables');
}

// Kh·ªüi t·∫°o Redis client v·ªõi x·ª≠ l√Ω l·ªói
const redisClient = createClient({ url: REDIS_URL });
let redisAvailable = true;

redisClient.on('error', (err) => {
  console.error('Redis Client Error:', err);
  redisAvailable = false;
});
redisClient.connect().catch((err) => {
  console.error('Redis Connection Error:', err);
  redisAvailable = false;
});

// Schema ƒë·ªÉ validate input
const MessageSchema = z.array(
  z.union([
    z.string().min(1, 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c r·ªóng'),
    z.object({
      role: z.enum(['user', 'assistant']),
      content: z.string().min(1, 'N·ªôi dung tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c r·ªóng'),
    }),
  ])
).min(1, 'Messages kh√¥ng ƒë∆∞·ª£c r·ªóng');

const ChatInputSchema = z.object({
  messages: MessageSchema,
  sessionId: z.string().optional(),
  userId: z.string().nullable().optional(),
});

// ƒê·ªãnh nghƒ©a interface
interface IntentData {
  intent: string;
  keywords: string[];
  petType?: string;
  petName?: string;
  productType?: string;
  productName?: string;
}

interface ChatResponse {
  intent: string;
  message: string;
  products?: any[];
  articles?: any[];
  menuItems?: any[];
  sessionId?: string;
  error?: string;
  buttons?: { label: string; action: string }[];
}

// Context interface ƒë·ªÉ l∆∞u th√¥ng tin nh∆∞ t√™n th√∫ c∆∞ng
interface ChatContext {
  messages: any[];
  lastResponse: ChatResponse;
  timestamp: number;
  petName?: string;
  petType?: string;
}

// Intent ƒë∆°n gi·∫£n
const SIMPLE_INTENTS_KEYWORDS: { [key: string]: RegExp } = {
  'ch√†o h·ªèi': /^(xin ch√†o|hello|hi|ch√†o)$/i,
  'c·∫£m ∆°n': /^(c·∫£m ∆°n|thanks|thank you)$/i,
  't·∫°m bi·ªát': /^(t·∫°m bi·ªát|bye|goodbye)$/i,
  'ch·ªâ xem qua': /ch·ªâ xem qua|xem qua|xem th·ª≠/i,
  'consult_pet_product': /t∆∞ v·∫•n s·∫£n ph·∫©m|c·∫ßn t∆∞ v·∫•n|g·ª£i √Ω s·∫£n ph·∫©m.*(th√∫ c∆∞ng|ch√≥|m√®o)/i,
  'pet_name': /(m√®o|ch√≥).*(t√™n|g·ªçi).*(l√†|g√¨)/i,
  'pet_disease': /(ch√≥|m√®o).*(b·ªánh|b·ªã b·ªánh).*(g√¨|n√†o)/i,
  'product_usage': /(s·ª≠ d·ª•ng|d√πng).*(s·∫£n ph·∫©m|n√†y).*(th·∫ø n√†o|ra sao)/i,
  'pet_care': /(chƒÉm s√≥c|nu√¥i).*(th√∫ c∆∞ng|ch√≥|m√®o).*(th·∫ø n√†o|hi·ªáu qu·∫£)/i,
  'find_cat_accessories': /t√¨m.*ph·ª• ki·ªán.*m√®o/i,
  'find_dog_accessories': /t√¨m.*ph·ª• ki·ªán.*ch√≥/i,
};

// ƒê·ªãnh nghƒ©a SIMPLE_RESPONSES
const SIMPLE_RESPONSES: { [key: string]: string } = {
  'ch√†o h·ªèi': 'Xin ch√†o! üêæ R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! B·∫°n ƒëang t√¨m g√¨ cho th√∫ c∆∞ng c·ªßa m√¨nh h√¥m nay?',
  'c·∫£m ∆°n': 'C·∫£m ∆°n b·∫°n! N·∫øu c·∫ßn g√¨ th√™m c·ª© h·ªèi nh√©!',
  't·∫°m bi·ªát': 'T·∫°m bi·ªát b·∫°n! H·∫πn g·∫∑p l·∫°i!',
  'ch·ªâ xem qua': 'C·ª© tho·∫£i m√°i xem nh√©! N·∫øu c·∫ßn t∆∞ v·∫•n g√¨, c·ª© h·ªèi m√¨nh nha! üòä',
  'consult_pet_product': 'M√¨nh s·∫Ω g·ª£i √Ω m·ªôt s·ªë s·∫£n ph·∫©m ph·ªï bi·∫øn cho b·∫°n nh√©!',
};

// Danh s√°ch intent h·ª£p l·ªá
const validIntents = [
  'ch√†o h·ªèi', 'c·∫£m ∆°n', 't·∫°m bi·ªát', 'ch·ªâ xem qua', 'consult_pet_product',
  'find_dog_accessories', 'find_cat_accessories', 'recommend_product', 'check_order',
  'place_order', 'find_article', 'find_menu', 'pet_name', 'pet_disease', 'product_usage', 'pet_care'
];

// T·ª´ kh√≥a vi ph·∫°m (b·∫°o l·ª±c, t√¨nh d·ª•c, v.v.)
const VIOLATION_KEYWORDS = ['ƒë√°nh', 'ƒë·∫≠p', 'b·∫°o l·ª±c', 't√¨nh d·ª•c', 'gi·∫øt', 'h√†nh hung'];

const checkContentSafety = (message: string): boolean => {
  const lowerCaseMessage = message.toLowerCase();
  return !VIOLATION_KEYWORDS.some(keyword => lowerCaseMessage.includes(keyword));
};

// L·∫•y intent t·ª´ Wit.ai v·ªõi fallback n·∫øu Redis l·ªói
const getWitAIIntent = async (message: string): Promise<IntentData> => {
  if (!redisAvailable) {
    console.log('Redis kh√¥ng kh·∫£ d·ª•ng, b·ªè qua cache.');
    try {
      const response = await axios.get('https://api.wit.ai/message', {
        params: { q: message },
        headers: { Authorization: `Bearer ${WitAI}` },
      });
      const intent = response.data.intents[0]?.name || 'h·ªèi ƒë√°p';
      const entities = response.data.entities || {};
      const petType = entities['pet_type:pet_type']?.[0]?.value || '';
      const petName = entities['pet_name:pet_name']?.[0]?.value || '';
      const productType = entities['product_type:product_type']?.[0]?.value || '';
      const productName = entities['product_name:product_name']?.[0]?.value || '';
      const keywords = [petType, petName, productType, productName].filter(Boolean);
      return { intent, keywords, petType, petName, productType, productName };
    } catch (error) {
      console.error('Wit.ai error:', error);
      return { intent: 'h·ªèi ƒë√°p', keywords: [] };
    }
  }

  const cacheKey = `witai:${message}`;
  const cachedIntent = await redisClient.get(cacheKey);
  if (cachedIntent) {
    console.log('L·∫•y intent t·ª´ cache:', cachedIntent);
    return JSON.parse(cachedIntent);
  }

  try {
    const response = await axios.get('https://api.wit.ai/message', {
      params: { q: message },
      headers: { Authorization: `Bearer ${WitAI}` },
    });
    const intent = response.data.intents[0]?.name || 'h·ªèi ƒë√°p';
    const entities = response.data.entities || {};
    const petType = entities['pet_type:pet_type']?.[0]?.value || '';
    const petName = entities['pet_name:pet_name']?.[0]?.value || '';
    const productType = entities['product_type:product_type']?.[0]?.value || '';
    const productName = entities['product_name:product_name']?.[0]?.value || '';
    const keywords = [petType, petName, productType, productName].filter(Boolean);
    const intentData = { intent, keywords, petType, petName, productType, productName };

    await redisClient.setEx(cacheKey, CACHE_TTL, JSON.stringify(intentData));
    return intentData;
  } catch (error) {
    console.error('Wit.ai error:', error);
    return { intent: 'h·ªèi ƒë√°p', keywords: [] };
  }
};

// L∆∞u v√† l·∫•y context v·ªõi fallback
const saveContext = async (identifier: string, messages: any[], response: ChatResponse, petName?: string, petType?: string) => {
  if (redisAvailable) {
    const contextKey = `chat_context:${identifier}`;
    const context: ChatContext = {
      messages,
      lastResponse: response,
      timestamp: Date.now(),
      petName,
      petType,
    };
    await redisClient.setEx(contextKey, CONTEXT_TTL, JSON.stringify(context));
  }
};

const getContext = async (identifier: string): Promise<ChatContext | null> => {
  if (redisAvailable) {
    const contextKey = `chat_context:${identifier}`;
    const context = await redisClient.get(contextKey);
    return context ? JSON.parse(context) : null;
  }
  return null;
};

// H√†m x·ª≠ l√Ω intent ri√™ng bi·ªát
const handleRecommendProduct = async (userMessage: string, intentData: IntentData, db: Db): Promise<ChatResponse> => {
  let keywords = [intentData.productType, ...intentData.keywords].filter(Boolean);
  if (keywords.length === 0) {
    keywords = userMessage.split(' ').filter((word) => word.length > 2);
  }

  if (keywords.length === 0) {
    return {
      intent: 'recommend_product',
      message: 'Vui l√≤ng cung c·∫•p th√™m th√¥ng tin v·ªÅ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m (v√≠ d·ª•: th·ª©c ƒÉn cho ch√≥).',
    };
  }

  try {
    const isForDog = userMessage.includes('ch√≥');
    const isForCat = userMessage.includes('m√®o');
    const isAccessory = userMessage.includes('ph·ª• ki·ªán');

    let query: any = { title: { $regex: keywords.join('|'), $options: 'i' } };

    if (isAccessory) {
      query = {
        $and: [
          { title: { $regex: keywords.join('|'), $options: 'i' } },
          { title: { $regex: 'ph·ª• ki·ªán|ƒë·ªì ch∆°i|v√≤ng c·ªï|d√¢y d·∫Øt|ƒë·ªám|gi∆∞·ªùng|khay|v·ªá sinh|c√¢y c√†o|nh√†', $options: 'i' } },
          { title: { $not: { $regex: 'h·∫°t|th·ª©c ƒÉn', $options: 'i' } } },
        ]
      };
      if (isForDog) {
        query.$and.push({ title: { $regex: 'ch√≥', $options: 'i' } });
      } else if (isForCat) {
        query.$and.push({ title: { $regex: 'm√®o', $options: 'i' } });
      }
    }

    const products = await db
      .collection('products')
      .find(query)
      .limit(3)
      .toArray();

    return products.length > 0
      ? {
          intent: 'recommend_product',
          message: 'D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p m√† b·∫°n c√≥ th·ªÉ th√≠ch:',
          products: products.map((p: any) => ({
            id: p._id?.toString() || '0',
            name: p.title || 'S·∫£n ph·∫©m kh√¥ng t√™n',
            brand: p.brand || 'Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
            price: parseFloat(p.originalPrice?.replace(/[^0-9]/g, '') || '0'),
            image: p.image || 'https://via.placeholder.com/150',
            href: `/products/${p._id}`,
          })),
          buttons: [{ label: 'Return', action: 'return' }],
        }
      : {
          intent: 'recommend_product',
          message: 'Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m ph√π h·ª£p trong database. B·∫°n mu·ªën th·ª≠ t·ª´ kh√≥a kh√°c kh√¥ng?',
        };
  } catch (error) {
    console.error('Error in handleRecommendProduct:', error);
    return {
      intent: 'recommend_product',
      message: 'C√≥ l·ªói x·∫£y ra khi t√¨m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
};

const handleCheckOrder = async (intentData: IntentData, db: Db): Promise<ChatResponse> => {
  const orderCode = intentData.keywords[0];
  if (!orderCode) {
    return { intent: 'check_order', message: 'Vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng (v√≠ d·ª•: ORD123456).' };
  }

  try {
    const order = await db.collection('orders').findOne({ order_code: orderCode });
    return order
      ? {
          intent: 'check_order',
          message: `ƒê∆°n h√†ng ${order.order_id}: ${order.status}, T·ªïng: ${order.total} VND. B·∫°n c·∫ßn th√™m th√¥ng tin g√¨ kh√¥ng?`,
        }
      : { intent: 'check_order', message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ƒë∆°n h√†ng.' };
  } catch (error) {
    console.error('Error in handleCheckOrder:', error);
    return {
      intent: 'check_order',
      message: 'C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
};

const handleFindDogAccessories = async (db: Db): Promise<ChatResponse> => {
  try {
    const products = await db
      .collection('products')
      .find({}) // B·ªè to√†n b·ªô ƒëi·ªÅu ki·ªán l·ªçc, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
      .limit(3) // Gi·ªõi h·∫°n 3 s·∫£n ph·∫©m
      .toArray();

    return products.length > 0
      ? {
          intent: 'find_dog_accessories',
          message: 'D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m m√† b·∫°n c√≥ th·ªÉ th√≠ch:',
          products: products.map((p: any) => ({
            id: p._id?.toString() || '0',
            name: p.title || 'S·∫£n ph·∫©m kh√¥ng t√™n',
            brand: p.brand || 'Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
            price: parseFloat(p.originalPrice?.replace(/[^0-9]/g, '') || '0'),
            image: p.image || 'https://via.placeholder.com/150',
            href: p.href || `/products/${p._id}`,
          })),
          buttons: [{ label: 'Return', action: 'return' }],
        }
      : {
          intent: 'find_dog_accessories',
          message: 'Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m trong database. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m kh√°c kh√¥ng?',
        };
  } catch (error) {
    console.error('Error in handleFindDogAccessories:', error);
    return {
      intent: 'find_dog_accessories',
      message: 'C√≥ l·ªói x·∫£y ra khi t√¨m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
};

const handleFindCatAccessories = async (db: Db): Promise<ChatResponse> => {
  try {
    const products = await db
      .collection('products')
      .find({}) // B·ªè to√†n b·ªô ƒëi·ªÅu ki·ªán l·ªçc, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
      .limit(3) // Gi·ªõi h·∫°n 3 s·∫£n ph·∫©m
      .toArray();

    return products.length > 0
      ? {
          intent: 'find_cat_accessories',
          message: 'D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m m√† b·∫°n c√≥ th·ªÉ th√≠ch:',
          products: products.map((p: any) => ({
            id: p._id?.toString() || '0',
            name: p.title || 'S·∫£n ph·∫©m kh√¥ng t√™n',
            brand: p.brand || 'Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
            price: parseFloat(p.originalPrice?.replace(/[^0-9]/g, '') || '0'),
            image: p.image || 'https://via.placeholder.com/150',
            href: p.href || `/products/${p._id}`,
          })),
          buttons: [{ label: 'Return', action: 'return' }],
        }
      : {
          intent: 'find_cat_accessories',
          message: 'Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m trong database. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m kh√°c kh√¥ng?',
        };
  } catch (error) {
    console.error('Error in handleFindCatAccessories:', error);
    return {
      intent: 'find_cat_accessories',
      message: 'C√≥ l·ªói x·∫£y ra khi t√¨m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
};

const handleConsultProduct = async (db: Db): Promise<ChatResponse> => {
  try {
    const products = await db
      .collection('products')
      .find({})
      .limit(3)
      .toArray();

    const productList = products.length > 0 ? products.map((p: any) => ({
      id: p._id?.toString() || '0',
      name: p.title || 'S·∫£n ph·∫©m kh√¥ng t√™n',
      description: getProductDescription(p.title),
      brand: p.brand || 'Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
      price: parseFloat(p.originalPrice?.replace(/[^0-9]/g, '') || '0'),
      image: p.image || 'https://via.placeholder.com/150',
      href: `/products/${p._id}`,
    })) : [];

    return {
      intent: 'consult_pet_product',
      message: 'M√¨nh s·∫Ω g·ª£i √Ω m·ªôt s·ªë s·∫£n ph·∫©m ph·ªï bi·∫øn cho b·∫°n nh√©!',
      products: productList.length > 0 ? productList : [
        {
          id: '1',
          name: 'Khay V·ªá Sinh Th√†nh Cao Cho M√®o Richell <8kg 41x50x31',
          description: 'Khay v·ªá sinh thi·∫øt k·∫ø th√†nh cao, ph√π h·ª£p cho m√®o d∆∞·ªõi 8kg, k√≠ch th∆∞·ªõc 41x50x31 cm, d·ªÖ d√†ng v·ªá sinh.',
          brand: 'Richell',
          price: 400000,
          image: 'https://paddy.vn/cdn/shop/files/1_d2b357e9-3a9b-4dd3-90c9-a728432acfd5_785x.png?v=1741147113',
          href: '/products/67f80b979430271ff0b98cec',
        },
        {
          id: '2',
          name: 'Nh√† V·ªá Sinh Cho M√®o K√®m X·∫ªng Richell <6kg 40x51x38',
          description: 'Nh√† v·ªá sinh k√≠n cho m√®o d∆∞·ªõi 6kg, k√≠ch th∆∞·ªõc 40x51x38 cm, ƒëi k√®m x·∫ªng ti·ªán l·ª£i, gi·ªØ kh√¥ng gian s·∫°ch s·∫Ω.',
          brand: 'Richell',
          price: 550000,
          image: 'https://paddy.vn/cdn/shop/files/Hinh_cover_sp_785x.png?v=1741163616',
          href: '/products/67f80b979430271ff0b98ced',
        },
        {
          id: '3',
          name: 'H·∫°t Cho M√®o Cats On Mix T 1.4kg',
          description: 'Th·ª©c ƒÉn h·∫°t dinh d∆∞·ª°ng cho m√®o, tr·ªçng l∆∞·ª£ng 1.4kg, h·ªó tr·ª£ s·ª©c kh·ªèe l√¥ng v√† h·ªá ti√™u h√≥a, h∆∞∆°ng v·ªã th∆°m ngon.',
          brand: "Cat's On",
          price: 220000,
          image: 'https://paddy.vn/cdn/shop/files/4_0dae6796-b143-40a4-8dd9-501730455a29_785x.png?v=1740383628',
          href: '/products/67f80b979430271ff0b98cee',
        },
      ],
      buttons: [{ label: 'Return', action: 'return' }],
    };
  } catch (error) {
    console.error('Error in handleConsultProduct:', error);
    return {
      intent: 'consult_pet_product',
      message: 'C√≥ l·ªói x·∫£y ra khi g·ª£i √Ω s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.',
      products: [
        {
          id: '1',
          name: 'Khay V·ªá Sinh Th√†nh Cao Cho M√®o Richell <8kg 41x50x31',
          description: 'Khay v·ªá sinh thi·∫øt k·∫ø th√†nh cao, ph√π h·ª£p cho m√®o d∆∞·ªõi 8kg, k√≠ch th∆∞·ªõc 41x50x31 cm, d·ªÖ d√†ng v·ªá sinh.',
          brand: 'Richell',
          price: 400000,
          image: 'https://paddy.vn/cdn/shop/files/1_d2b357e9-3a9b-4dd3-90c9-a728432acfd5_785x.png?v=1741147113',
          href: '/products/67f80b979430271ff0b98cec',
        },
        {
          id: '2',
          name: 'Nh√† V·ªá Sinh Cho M√®o K√®m X·∫ªng Richell <6kg 40x51x38',
          description: 'Nh√† v·ªá sinh k√≠n cho m√®o d∆∞·ªõi 6kg, k√≠ch th∆∞·ªõc 40x51x38 cm, ƒëi k√®m x·∫ªng ti·ªán l·ª£i, gi·ªØ kh√¥ng gian s·∫°ch s·∫Ω.',
          brand: 'Richell',
          price: 550000,
          image: 'https://paddy.vn/cdn/shop/files/Hinh_cover_sp_785x.png?v=1741163616',
          href: '/products/67f80b979430271ff0b98ced',
        },
      ],
      buttons: [{ label: 'Return', action: 'return' }],
    };
  }
};

const handlePetName = async (userMessage: string, context: ChatContext | null, identifier: string, sessionId: string, messages: any[], intentData: IntentData): Promise<ChatResponse> => {
  const petName = intentData.petName || userMessage.match(/(?:m√®o|ch√≥).*(?:t√™n|g·ªçi).*(?:l√†)\s*(\w+)/i)?.[1];
  if (petName) {
    const response = {
      intent: 'pet_name',
      message: `Cute qu√°! B√© ${intentData.petType || 'm√®o/ch√≥'} nh√† b·∫°n t√™n l√† ${petName} ƒë√∫ng kh√¥ng?`,
      sessionId
    };
    await saveContext(identifier, messages, response, petName, intentData.petType);
    return response;
  }

  if (userMessage.match(/(?:m√®o|ch√≥).*(?:t√™n|g·ªçi).*(?:g√¨|l√† ai)/i) && context?.petName) {
    return {
      intent: 'pet_name',
      message: `B√© ${context.petType || 'm√®o/ch√≥'} nh√† b·∫°n t√™n l√† ${context.petName} m√†! üêæ`,
      sessionId
    };
  }

  return {
    intent: 'pet_name',
    message: 'B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt t√™n b√© m√®o/ch√≥ nh√† b·∫°n kh√¥ng? V√≠ d·ª•: "B√© m√®o nh√† t√¥i t√™n Zeros".',
    sessionId
  };
};

const handlePetDisease = async (): Promise<ChatResponse> => {
  return {
    intent: 'pet_disease',
    message: 'Ch√≥ c√≥ th·ªÉ m·∫Øc m·ªôt s·ªë b·ªánh ph·ªï bi·∫øn nh∆∞: b·ªánh care (b·ªánh s√†i s·ªët), b·ªánh parvovirus, ho·∫∑c b·ªánh v·ªÅ ƒë∆∞·ªùng ti√™u h√≥a. B·∫°n n√™n ƒë∆∞a b√© ƒë·∫øn b√°c sƒ© th√∫ y ƒë·ªÉ ki·ªÉm tra ƒë·ªãnh k·ª≥ v√† ti√™m ph√≤ng ƒë·∫ßy ƒë·ªß nh√©! N·∫øu mu·ªën t√¨m hi·ªÉu th√™m, b·∫°n c√≥ mu·ªën xem b√†i vi·∫øt v·ªÅ chƒÉm s√≥c s·ª©c kh·ªèe kh√¥ng?',
  };
};

const handleProductUsage = async (userMessage: string, intentData: IntentData, db: Db): Promise<ChatResponse> => {
  const productName = intentData.productName;
  if (productName) {
    try {
      const products = await db
        .collection('products')
        .find({ title: { $regex: productName, $options: 'i' } })
        .limit(1)
        .toArray();

      if (products.length > 0) {
        const product = products[0];
        const usageInstructions = product.usageInstructions || "Hi·ªán t·∫°i ch∆∞a c√≥ h∆∞·ªõng d·∫´n chi ti·∫øt. Vui l√≤ng ki·ªÉm tra bao b√¨ s·∫£n ph·∫©m ho·∫∑c li√™n h·ªá nh√† cung c·∫•p.";
        return {
          intent: 'product_usage',
          message: `S·∫£n ph·∫©m "${product.title}": ${usageInstructions}`,
        };
      }
    } catch (error) {
      console.error('Error in handleProductUsage:', error);
      return {
        intent: 'product_usage',
        message: 'C√≥ l·ªói x·∫£y ra khi t√¨m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.',
      };
    }
  }

  return {
    intent: 'product_usage',
    message: 'Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m c·ª• th·ªÉ ƒë·ªÉ m√¨nh h∆∞·ªõng d·∫´n c√°ch s·ª≠ d·ª•ng nh√©! V√≠ d·ª•: "S·ª≠ d·ª•ng H·∫°t Cho M√®o Cats On th·∫ø n√†o?"',
  };
};

const handlePetCare = async (): Promise<ChatResponse> => {
  return {
    intent: 'pet_care',
    message: 'ƒê·ªÉ chƒÉm s√≥c th√∫ c∆∞ng hi·ªáu qu·∫£, b·∫°n n√™n: \n1. Cung c·∫•p ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng (th·ª©c ƒÉn ch·∫•t l∆∞·ª£ng, n∆∞·ªõc s·∫°ch). \n2. ƒê∆∞a b√© ƒëi kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ v√† ti√™m ph√≤ng ƒë·∫ßy ƒë·ªß. \n3. T·∫°o kh√¥ng gian s·ªëng s·∫°ch s·∫Ω, tho·∫£i m√°i. \n4. D√†nh th·ªùi gian ch∆°i ƒë√πa v√† quan t√¢m ƒë·∫øn b√©. B·∫°n c√≥ mu·ªën m√¨nh g·ª£i √Ω th√™m s·∫£n ph·∫©m h·ªó tr·ª£ kh√¥ng?',
  };
};

// H√†m l·∫•y m√¥ t·∫£ d·ª±a tr√™n ti√™u ƒë·ªÅ s·∫£n ph·∫©m
const getProductDescription = (title: string): string => {
  switch (title) {
    case 'Khay V·ªá Sinh Th√†nh Cao Cho M√®o Richell <8kg 41x50x31':
      return 'Khay v·ªá sinh thi·∫øt k·∫ø th√†nh cao, ph√π h·ª£p cho m√®o d∆∞·ªõi 8kg, k√≠ch th∆∞·ªõc 41x50x31 cm, d·ªÖ d√†ng v·ªá sinh.';
    case 'Nh√† V·ªá Sinh Cho M√®o K√®m X·∫ªng Richell <6kg 40x51x38':
      return 'Nh√† v·ªá sinh k√≠n cho m√®o d∆∞·ªõi 6kg, k√≠ch th∆∞·ªõc 40x51x38 cm, ƒëi k√®m x·∫ªng ti·ªán l·ª£i, gi·ªØ kh√¥ng gian s·∫°ch s·∫Ω.';
    case 'H·∫°t Cho M√®o Cats On Mix T 1.4kg':
      return 'Th·ª©c ƒÉn h·∫°t dinh d∆∞·ª°ng cho m√®o, tr·ªçng l∆∞·ª£ng 1.4kg, h·ªó tr·ª£ s·ª©c kh·ªèe l√¥ng v√† h·ªá ti√™u h√≥a, h∆∞∆°ng v·ªã th∆°m ngon.';
    default:
      return 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao cho th√∫ c∆∞ng c·ªßa b·∫°n.';
  }
};

// H√†m ch√≠nh x·ª≠ l√Ω chat
export const chatWithAI = async (
  messages: any,
  sessionId: string,
  userId: string | null,
  db: Db
): Promise<ChatResponse> => {
  try {
    const validatedMessages = MessageSchema.parse(messages);

    const normalizedMessages = validatedMessages.map((msg) =>
      typeof msg === 'string' ? { role: 'user', content: msg } : msg
    );
    const lastMessage = normalizedMessages[normalizedMessages.length - 1];
    const userMessage = lastMessage.content.toLowerCase().trim();

    console.log('User message:', userMessage); // Th√™m log ƒë·ªÉ debug

    // Ki·ªÉm tra n·ªôi dung vi ph·∫°m
    if (!checkContentSafety(userMessage)) {
      return {
        intent: 'invalid',
        message: 'Xin l·ªói, m√¨nh kh√¥ng h·ªó tr·ª£ c√°c n·ªôi dung li√™n quan ƒë·∫øn b·∫°o l·ª±c ho·∫∑c kh√¥ng ph√π h·ª£p. H√£y h·ªèi v·ªÅ th√∫ c∆∞ng nh√©!',
        sessionId
      };
    }

    const identifier = userId || sessionId;

    const context = await getContext(identifier);
    if (context) {
      console.log('T·∫£i context cho:', identifier);
    }

    // Ki·ªÉm tra intent ƒë∆°n gi·∫£n tr∆∞·ªõc
    for (const [intent, keywordRegex] of Object.entries(SIMPLE_INTENTS_KEYWORDS)) {
      if (keywordRegex.test(userMessage)) {
        console.log('Intent recognized:', intent); // Th√™m log ƒë·ªÉ debug
        let response: ChatResponse;
        if (intent === 'find_dog_accessories') {
          response = await handleFindDogAccessories(db);
        } else if (intent === 'find_cat_accessories') {
          response = await handleFindCatAccessories(db);
        } else if (intent === 'consult_pet_product') {
          response = await handleConsultProduct(db);
        } else if (intent === 'pet_name') {
          const intentData = await getWitAIIntent(userMessage);
          response = await handlePetName(userMessage, context, identifier, sessionId, normalizedMessages, intentData);
          await saveContext(identifier, normalizedMessages, response, intentData.petName || context?.petName, intentData.petType || context?.petType);
        } else if (intent === 'pet_disease') {
          response = await handlePetDisease();
        } else if (intent === 'product_usage') {
          const intentData = await getWitAIIntent(userMessage);
          response = await handleProductUsage(userMessage, intentData, db);
        } else if (intent === 'pet_care') {
          response = await handlePetCare();
        } else {
          response = { intent, message: SIMPLE_RESPONSES[intent], sessionId };
        }
        await saveContext(identifier, normalizedMessages, response, context?.petName, context?.petType);
        await db.collection('chat_history').insertMany([
          { session_id: sessionId, user_id: userId || null, role: 'user', content: userMessage, created_at: new Date() },
          { session_id: sessionId, user_id: userId || null, role: 'assistant', content: JSON.stringify(response), created_at: new Date() },
        ]);
        return response;
      }
    }

    // N·∫øu kh√¥ng match v·ªõi intent ƒë∆°n gi·∫£n, g·ªçi Wit.ai
    const intentData = await getWitAIIntent(userMessage);
    console.log('Intent from Wit.ai:', intentData.intent); // Th√™m log ƒë·ªÉ debug
    if (!validIntents.includes(intentData.intent)) {
      return {
        intent: 'invalid',
        message: 'Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn th√∫ c∆∞ng. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, ƒë∆°n h√†ng, ho·∫∑c c√°ch chƒÉm s√≥c th√∫ c∆∞ng kh√¥ng?',
        sessionId
      };
    }

    let responseData: ChatResponse;

    switch (intentData.intent) {
      case 'find_dog_accessories':
        responseData = await handleFindDogAccessories(db);
        break;
      case 'find_cat_accessories':
        responseData = await handleFindCatAccessories(db);
        break;
      case 'consult_pet_product':
        responseData = await handleConsultProduct(db);
        break;
      case 'recommend_product':
        responseData = await handleRecommendProduct(userMessage, intentData, db);
        break;
      case 'check_order':
        responseData = await handleCheckOrder(intentData, db);
        break;
      case 'place_order':
        responseData = userId
          ? {
              intent: 'place_order',
              message: 'Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng.',
            }
          : {
              intent: 'place_order',
              message: 'Xin l·ªói, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m tr∆∞·ªõc kh√¥ng?',
            };
        break;
      case 'find_article':
        let keywords = intentData.keywords;
        if (keywords.length === 0) {
          keywords = userMessage.split(' ').filter((word) => word.length > 2);
        }
        if (keywords.length > 0) {
          try {
            const articles = await db
              .collection('articles')
              .find({ title: { $regex: keywords.join('|'), $options: 'i' } })
              .limit(3)
              .toArray();
            responseData = articles.length > 0
              ? {
                  intent: 'find_article',
                  message: 'Danh s√°ch b√†i vi·∫øt li√™n quan. B·∫°n mu·ªën ƒë·ªçc b√†i n√†o?',
                  articles: articles.map((a: any) => ({
                    id: a.id?.toString() || '0',
                    title: a.title || 'B√†i vi·∫øt kh√¥ng t√™n',
                    content: (a.content || '').substring(0, 100) + '...',
                    href: a.href || `/articles/${a.id}`,
                  })),
                }
              : {
                  intent: 'find_article',
                  message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt. B·∫°n mu·ªën th·ª≠ t·ª´ kh√≥a kh√°c kh√¥ng?',
                };
          } catch (error) {
            console.error('Error in find_article:', error);
            responseData = {
              intent: 'find_article',
              message: 'C√≥ l·ªói x·∫£y ra khi t√¨m b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.',
            };
          }
        } else {
          responseData = {
            intent: 'find_article',
            message: 'Vui l√≤ng cung c·∫•p th√™m th√¥ng tin v·ªÅ b√†i vi·∫øt b·∫°n mu·ªën t√¨m.',
          };
        }
        break;
      case 'find_menu':
        try {
          const menuItems = await db
            .collection('menu_items')
            .find({ parent_id: null })
            .limit(3)
            .toArray();
          responseData = menuItems.length > 0
            ? {
                intent: 'find_menu',
                message: 'Danh s√°ch menu ch√≠nh. B·∫°n mu·ªën kh√°m ph√° m·ª•c n√†o?',
                menuItems: menuItems.map((m: any) => ({
                  id: m.id?.toString() || '0',
                  name: m.name || 'Menu kh√¥ng t√™n',
                  description: m.description || '',
                  href: m.href || `/menu/${m.id}`,
                })),
              }
            : {
                intent: 'find_menu',
                message: 'Kh√¥ng t√¨m th·∫•y menu. Vui l√≤ng th·ª≠ l·∫°i sau.',
              };
        } catch (error) {
          console.error('Error in find_menu:', error);
          responseData = {
            intent: 'find_menu',
            message: 'C√≥ l·ªói x·∫£y ra khi t√¨m menu. Vui l√≤ng th·ª≠ l·∫°i sau.',
          };
        }
        break;
      case 'pet_name':
        responseData = await handlePetName(userMessage, context, identifier, sessionId, normalizedMessages, intentData);
        await saveContext(identifier, normalizedMessages, responseData, intentData.petName || context?.petName, intentData.petType || context?.petType);
        break;
      case 'pet_disease':
        responseData = await handlePetDisease();
        break;
      case 'product_usage':
        responseData = await handleProductUsage(userMessage, intentData, db);
        break;
      case 'pet_care':
        responseData = await handlePetCare();
        break;
      default:
        responseData = {
          intent: 'h·ªèi ƒë√°p',
          message: 'Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ th√∫ c∆∞ng, s·∫£n ph·∫©m ho·∫∑c ƒë∆°n h√†ng. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c kh√¥ng?',
        };
    }

    responseData.sessionId = sessionId;
    await saveContext(identifier, normalizedMessages, responseData, context?.petName, context?.petType);
    await db.collection('chat_history').insertMany([
      { session_id: sessionId, user_id: userId || null, role: 'user', content: userMessage, created_at: new Date() },
      { session_id: sessionId, user_id: userId || null, role: 'assistant', content: JSON.stringify(responseData), created_at: new Date() },
    ]);

    return responseData;
  } catch (error: any) {
    console.error('Chat error details:', error);
    return {
      intent: 'h·ªèi ƒë√°p',
      message: 'Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau.',
      sessionId,
      error: error.message,
    };
  }
};

// D·ªçn d·∫πp l·ªãch s·ª≠ chat
export const cleanupChatHistory = async (db: Db) => {
  try {
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const result = await db
      .collection('chat_history')
      .deleteMany({ created_at: { $lt: oneDayAgo } });
    console.log(`ƒê√£ x√≥a ${result.deletedCount} tin nh·∫Øn c≈©`);
  } catch (error) {
    console.error('L·ªói khi d·ªçn d·∫πp chat_history:', error);
  }
};

// Kh·ªüi t·∫°o index cho MongoDB
export const initializeIndexes = async (db: Db) => {
  try {
    await db.collection('products').createIndex({ title: 'text' });
    await db.collection('orders').createIndex({ order_code: 1 });
    await db.collection('articles').createIndex({ title: 'text' });
    await db.collection('chat_history').createIndex({ session_id: 1, created_at: 1 });
    await db.collection('chat_history').createIndex({ user_id: 1, created_at: 1 });
    console.log('ƒê√£ t·∫°o index cho MongoDB');
  } catch (error) {
    console.error('L·ªói khi t·∫°o index:', error);
  }
};